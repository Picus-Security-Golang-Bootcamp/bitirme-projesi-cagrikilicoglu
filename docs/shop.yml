swagger: "2.0"
info:
  description: "This is a sample shopping server."
  version: "1.0.0"
  title: "Swagger Shopping-Cart"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "mcagrikilicoglu@gmail.com"
  license:
    name: "MIT"
    url: "http://opensource.org/licenses/MIT"
basePath: "/api/v1/shopping-cart-api"
tags:
  - name: "Product"
    description: "All product operations"
  - name: "Category"
    description: "All category operations"
  - name: "User"
    description: "All user operations"
  - name: "Cart"
    description: "All cart operations"
  - name: "Order"
    description: "All order operations"
  - name: "Api"
    description: "All operations regarding API itself"

schemes:
  - "https"
  - "http"
securityDefinitions:
  Jwt:
    type: apiKey
    name: Authorization
    in: header

paths:
  /products/:
    get:
      tags:
        - "Product"
      summary: "Get all the products in the store"
      description: "Returns all the products in the store"
      operationId: "getProducts"
      produces:
        - "application/json"
      parameters:
        - in: "query"
          name: "page"
          description: "requested page of all products ordered by name"
          type: string
        - in: "query"
          name: "pageSize"
          description: "requested pageSize to paginate all products"
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
  /products/sku/{sku}:
    get:
      tags:
        - "Product"
      summary: "Get a product with the given SKU input in the store"
      description: ""
      operationId: "getProductWithSKU"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "sku"
          description: "SKU of the product to return"
          required: true
          type: string
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
        "400":
          description: "Invalid sku supplied"
        "404":
          description: "Product not found"
  /products/delete/sku/{sku}:
    delete:
      tags:
        - "Product"
      summary: "Delete a product with the given SKU input in the store"
      description: ""
      operationId: "deleteProductWithSKU"
      parameters:
        - in: "path"
          name: "sku"
          description: "SKU of the product to delete"
          required: true
          type: string
      security:
        - Jwt: []
      responses:
        "200":
          description: "Product successfully deleted"
        "403":
          description: "You are not allowed to use this endpoint"
        "404":
          description: "Product not found"
  /products/update/sku/{sku}:
    put:
      tags:
        - "Product"
      summary: "Update a product with the given SKU input in the store"
      description: ""
      operationId: "updateProductWithSKU"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "sku"
          description: "SKU of the product to update"
          required: true
          type: string
        - in: "body"
          name: "body"
          description: "Product object that needs to be updated to the store"
          required: true
          schema:
            $ref: "#/definitions/Product"
      security:
        - Jwt: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
        "403":
          description: "You are not allowed to use this endpoint"
        "404":
          description: "Product not found"
        "405":
          description: "Invalid input"
  /products/id/{id}:
    get:
      tags:
        - "Product"
      summary: "Get a product with the given ID input in the store"
      description: ""
      operationId: "getProductWithID"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the product to return"
          required: true
          type: string
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
        "400":
          description: "Invalid id supplied"
        "404":
          description: "Product not found"
  /products:
    get:
      tags:
        - "Product"
      summary: "Get products with a given name in the store"
      description: "Returns all the products matching the given name in the store"
      operationId: "getProductsByName"
      produces:
        - "application/json"
      parameters:
        - name: "name"
          in: "query"
          description: "Name that need to be considered for filter"
          required: true
          type: string
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
        "404":
          description: "Product not found"
  /products/create:
    post:
      tags:
        - "Product"
      summary: "Add a new product to the store"
      description: ""
      operationId: "addProduct"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Product object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Product"
      security:
        - Jwt: []
      responses:
        "201":
          description: "successful create operation"
          schema:
            $ref: "#/definitions/Product"
        "400":
          description: "Product already exist"
        "403":
          description: "You are not allowed to use this endpoint"
        "405":
          description: "Invalid input"
  /products/upload:
    post:
      tags:
        - "Product"
      summary: "Add new products to the store from a file"
      description: ""
      operationId: "addProducts"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - in: "formData"
          name: "file"
          description: "Product objects that needs to be added to the store"
          required: true
          type: file
      security:
        - Jwt: []
      responses:
        "201":
          description: "successful create operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
        "403":
          description: "You are not allowed to use this endpoint"
  /categories:
    get:
      tags:
        - "Category"
      summary: "Get all the categories in the store"
      description: "Returns all the categories in the store"
      operationId: "getCategories"
      produces:
        - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Category"
  /categories/{name}:
    get:
      tags:
        - "Category"
      summary: "Get all the products of category by category name"
      description: "Returns all the products of an input category"
      operationId: "getProductsByCategoryName"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "name"
          description: "Name of the category of which products will return"
          required: true
          type: string
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
        "404":
          description: "Category not found"
  /categories/create:
    post:
      tags:
        - "Category"
      summary: "Add a new category to the store"
      description: ""
      operationId: "addCategory"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Category object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Category"
      security:
        - Jwt: []
      responses:
        "201":
          description: "successful create operation"
          schema:
            $ref: "#/definitions/Category"
        "403":
          description: "You are not allowed to use this endpoint"
        "405":
          description: "Invalid input"
  /categories/upload:
    post:
      tags:
        - "Category"
      summary: "Add new categories to the store from a file"
      description: ""
      operationId: "addCategories"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - in: "formData"
          name: "file"
          description: "Category objects that needs to be added from a file to the store"
          required: true
          type: file
      security:
        - Jwt: []
      responses:
        "201":
          description: "successful create operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Category"
        "403":
          description: "You are not allowed to use this endpoint"
  /signup:
    post:
      tags:
        - "User"
      summary: "Register user into the system"
      description: ""
      operationId: "signupUser"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "user object that needs to be registered in to the store"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "201":
          description: "successful create operation"
          schema:
            type: "array"
            items:
              type: "string"
        "400":
          description: "User already exist"
        "500":
          description: "Invalid input"
  /login:
    post:
      tags:
        - "User"
      summary: "Log user into the system"
      description: ""
      operationId: "loginUser"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "user object that needs to be logged in to the store"
          required: true
          schema:
            $ref: "#/definitions/Login"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
        "500":
          description: "Wrong credentials"
  /refresh:
    post:
      tags:
        - "User"
      summary: "Refreshes access token of the user with refresh token"
      description: "Refreshes access token of the user with refresh token"
      operationId: "refreshAccessToken"
      produces:
        - "application/json"
      parameters: []
      security:
        - Jwt: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
        "403":
          description: "You are not allowed to use this endpoint"
  /cart:
    get:
      tags:
        - "Cart"
      summary: "Get the cart of current user"
      description: "Returns the cart of current user"
      operationId: "getCart"
      produces:
        - "application/json"
      parameters: []
      security:
        - Jwt: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Cart"
        "403":
          description: "You are not allowed to use this endpoint"
  /cart/add/sku/{sku}/quantity/{quantity}:
    post:
      tags:
        - "Cart"
      summary: "Add product with given SKU and of given quantity inputs to user's cart"
      description: "Add item with given sku and of given quantity to cart"
      operationId: "addItem"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "sku"
          description: "SKU of the product to add"
          required: true
          type: string
        - in: "path"
          name: "quantity"
          description: "Quantity of the product to add"
          required: true
          type: string
      security:
        - Jwt: []
      responses:
        "200":
          description: "Successful Operation"
          schema:
            $ref: "#/definitions/Cart"
        "403":
          description: "You are not allowed to use this endpoint"
        "404":
          description: "Product not found"
        "500":
          description: "Product with SKU is already in cart"
  /cart/update/sku/{sku}/quantity/{quantity}:
    put:
      tags:
        - "Cart"
      summary: "Update a product in the users cart with a new quantity input"
      description: "Update product in the cart with a new quantity"
      operationId: "updateItem"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "sku"
          description: "SKU of the product to add"
          required: true
          type: string
        - in: "path"
          name: "quantity"
          description: "New quantity of the product to update"
          required: true
          type: string
      security:
        - Jwt: []
      responses:
        "200":
          description: "Successful Operation"
          schema:
            $ref: "#/definitions/Cart"
        "403":
          description: "You are not allowed to use this endpoint"
        "404":
          description: "Product not found"
        "500":
          description: "Product is not in the cart add first"
  /cart/delete/sku/{sku}:
    delete:
      tags:
        - "Cart"
      summary: "Delete a product from the user's cart with SKU input"
      description: "Delete a product from the user's cart with SKU input"
      operationId: "deleteItem"
      parameters:
        - in: "path"
          name: "sku"
          description: "SKU of the product to delete"
          required: true
          type: string
      security:
        - Jwt: []
      responses:
        "200":
          description: "Product successfully deleted"
        "403":
          description: "You are not allowed to use this endpoint"
        "404":
          description: "Product not found"
  /order:
    post:
      tags:
        - "Order"
      summary: "Order the products that are in currently in user's cart"
      description: "Order the products that are in currently in user's cart"
      operationId: "order"
      produces:
        - "application/json"
      security:
        - Jwt: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "403":
          description: "You are not allowed to use this endpoint"
        "500":
          description: "You are not satisfying ordering conditions"
  /order/id/{id}/cancel:
    delete:
      tags:
        - "Order"
      summary: "Cancel an order of the user that is placed before"
      description: "Cancel an order of the user that is placed before"
      operationId: "cancelOrder"
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the order to cancel"
          required: true
          type: string
      security:
        - Jwt: []
      responses:
        "200":
          description: "successful operation"
        "403":
          description: "You are not allowed to use this endpoint"
        "404":
          description: "Order not found"
        "500":
          description: "Invalid id supplied"
  /order/history:
    get:
      tags:
        - "Order"
      summary: "Get the order history of the user"
      description: "Get the order history of the user"
      operationId: "getOrderHistory"
      parameters: []
      security:
        - Jwt: []
      responses:
        "200":
          description: "successful operation"
        "403":
          description: "You are not allowed to use this endpoint"
  /health:
    get:
      tags:
        - "Api"
      summary: "Check health of the api"
      description: "Check health of the api"
      operationId: "checkHealth"
      parameters: []
      responses:
        "200":
          description: "successful operation"
definitions:
  Product:
    type: "object"
    required:
      - "name"
      - "price"
      - "stock"
      - "categoryName"
    properties:
      name:
        type: "string"
      price:
        type: "number"
        format: "float"
      stock:
        type: "object"
        $ref: "#/definitions/Stock"
      categoryName:
        type: "string"
  Stock:
    type: "object"
    required:
      - "sku"
    properties:
      sku:
        type: "string"
      number:
        type: "integer"
        format: "uint32"
  Category:
    type: "object"
    required:
      - "name"
    properties:
      name:
        type: "string"
      description:
        type: "string"
  User:
    type: "object"
    required:
      - "email"
      - "password"
      - "firstName"
      - "lastName"
      - "zipCode"
    properties:
      email:
        type: "string"
      password:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      zipCode:
        type: "string"
  Login:
    type: "object"
    required:
      - "email"
      - "password"
    properties:
      email:
        type: "string"
      password:
        type: "string"
  Cart:
    type: "object"
    required:
      - "userID"
      - "items"
      - "totalPrice"
    properties:
      userID:
        type: "string"
      items:
        type: "array"
        items:
          $ref: "#/definitions/Item"
      totalPrice:
        type: "number"
        format: "float"
  Item:
    type: "object"
    required:
      - "product"
      - "quantity"
      - "totalPrice"
    properties:
      product:
        type: "object"
        $ref: "#/definitions/Product"
      quantity:
        type: "integer"
        format: "uint32"
      totalPrice:
        type: "number"
        format: "float"
  Order:
    type: "object"
    required:
      - "id"
      - "items"
      - "totalPrice"
      - "status"
      - "date"
    properties:
      id:
        type: "string"
      items:
        type: "array"
        items:
          $ref: "#/definitions/Item"
      totalPrice:
        type: "number"
        format: "float"
      status:
        type: "string"
      date:
        type: "string"
        format: "date"
